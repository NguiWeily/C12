Files to turn in : ft_list_sort.c, ft_list.h
Allowed functions : None

• Create the function ft_list_sort which sorts the list’s elements by ascending order
by comparing two elements by comparing their data with a function.
• Here’s how it should be prototyped :
void ft_list_sort(t_list **begin_list, int (*cmp)());

• Function pointed by cmp will be used as follows :
(*cmp)(list_ptr->data, list_other_ptr->data);

cmp could be for instance ft_strcmp.

Here's the implementation of the `ft_list_sort` function:

```c
#include "ft_list.h"

void ft_list_sort(t_list **begin_list, int (*cmp)())
{
    int swapped;
    t_list *ptr1 = *begin_list;
    t_list *lptr = NULL;

    if (ptr1 == NULL)
        return;

    do
    {
        swapped = 0;
        ptr1 = *begin_list;

        while (ptr1->next != lptr)
        {
            if ((*cmp)(ptr1->data, ptr1->next->data) > 0)
            {
                void *temp = ptr1->data;
                ptr1->data = ptr1->next->data;
                ptr1->next->data = temp;
                swapped = 1;
            }
            ptr1 = ptr1->next;
        }
        lptr = ptr1;
    } while (swapped);
}
```

This function implements the bubble sort algorithm to sort the list's elements in ascending order. The elements are compared using the provided `cmp` function. The function repeatedly traverses the list and swaps adjacent elements if they are in the wrong order until the entire list is sorted.

Please note that the `cmp` function should be provided by the caller and should have the signature `int cmp(void *data1, void *data2)`. It should return a negative integer if `data1` is less than `data2`, zero if they are equal, or a positive integer if `data1` is greater than `data2`.

Certainly! Here's the `ft_list.h` file for the `ft_list_sort` function:

```c
#ifndef FT_LIST_H
#define FT_LIST_H

typedef struct s_list
{
    struct s_list *next;
    void *data;
} t_list;

void ft_list_sort(t_list **begin_list, int (*cmp)());

#endif /* FT_LIST_H */
```

This `ft_list.h` file declares the `t_list` structure and the prototype for the `ft_list_sort` function. It provides the necessary structure definition and function declaration for using the `ft_list_sort` function with a linked list.

Remember to include this `ft_list.h` file in your program when using the `ft_list_sort` function.

Certainly! Here's an example test program for the `ft_list_sort` function:

```c
#include <stdio.h>
#include "ft_list.h"

int cmp_int(void *data1, void *data2)
{
    int num1 = *(int *)data1;
    int num2 = *(int *)data2;

    if (num1 < num2)
        return -1;
    else if (num1 > num2)
        return 1;
    else
        return 0;
}

void print_list(t_list *list)
{
    while (list != NULL)
    {
        int *data = (int *)list->data;
        printf("%d ", *data);
        list = list->next;
    }
    printf("\n");
}

int main()
{
    // Create a sample linked list
    t_list *list = NULL;
    int data[] = {5, 2, 8, 3, 1};
    int size = sizeof(data) / sizeof(data[0]);

    for (int i = 0; i < size; i++)
    {
        t_list *new_elem = ft_create_elem(&data[i]);
        new_elem->next = list;
        list = new_elem;
    }

    printf("Original List: ");
    print_list(list);

    // Sort the linked list
    ft_list_sort(&list, cmp_int);

    printf("Sorted List: ");
    print_list(list);

    return 0;
}
```

In this test program, we create a sample linked list with integer data. We then call the `ft_list_sort` function to sort the list in ascending order using the `cmp_int` comparison function. Finally, we print the original list and the sorted list to verify the sorting.

Make sure to include the `ft_list.h` file in your test program and compile it with the necessary files to run the program successfully.
