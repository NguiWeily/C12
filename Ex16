Files to turn in : ft_sorted_list_insert.c, ft_list.h
Allowed functions : ft_create_elem

• Create the function ft_sorted_list_insert which creates a new element and
inserts it into a list sorted so that it remains sorted in ascending order.
• Here’s how it should be prototyped :
void ft_sorted_list_insert(t_list **begin_list, void *data, int (*cmp)());

• Function pointed by cmp will be used as follows :
(*cmp)(list_ptr->data, list_other_ptr->data);

Sure! Here's the implementation of the `ft_sorted_list_insert` function:

```c
#include "ft_list.h"

void ft_sorted_list_insert(t_list **begin_list, void *data, int (*cmp)())
{
    t_list *new_node = ft_create_elem(data);

    if (*begin_list == NULL || cmp(data, (*begin_list)->data) < 0)
    {
        new_node->next = *begin_list;
        *begin_list = new_node;
    }
    else
    {
        t_list *current = *begin_list;

        while (current->next != NULL && cmp(data, current->next->data) >= 0)
        {
            current = current->next;
        }

        new_node->next = current->next;
        current->next = new_node;
    }
}
```

In this function, we first create a new node using the `ft_create_elem` function. Then, we handle the case where the list is empty or the new node should be inserted at the beginning of the list. If neither of these conditions is met, we traverse the list until we find the appropriate position to insert the new node while maintaining the ascending order. Finally, we update the pointers to insert the new node into the list.

Remember to include the `ft_list.h` header file in your program and compile it with the necessary dependencies.

Let me know if you have any further questions!

Certainly! Here's the `ft_list.h` file that includes the necessary definitions and function prototypes for the linked list operations:

```c
#ifndef FT_LIST_H
#define FT_LIST_H

typedef struct s_list
{
    struct s_list *next;
    void *data;
} t_list;

t_list *ft_create_elem(void *data);
void ft_list_push_front(t_list **begin_list, void *data);
int ft_list_size(t_list *begin_list);
void ft_list_push_back(t_list **begin_list, void *data);
t_list *ft_list_push_strs(int size, char **strs);
void ft_list_clear(t_list *begin_list, void (*free_fct)(void *));
t_list *ft_list_at(t_list *begin_list, unsigned int nbr);
void ft_list_reverse(t_list **begin_list);
void ft_list_foreach(t_list *begin_list, void (*f)(void *));
void ft_list_foreach_if(t_list *begin_list, void (*f)(void *), void *data_ref, int (*cmp)());
t_list *ft_list_find(t_list *begin_list, void *data_ref, int (*cmp)());
void ft_list_remove_if(t_list **begin_list, void *data_ref, int (*cmp)(), void (*free_fct)(void *));
void ft_list_merge(t_list **begin_list1, t_list *begin_list2);
void ft_list_sort(t_list **begin_list, int (*cmp)());
void ft_list_reverse_fun(t_list *begin_list);
void ft_sorted_list_insert(t_list **begin_list, void *data, int (*cmp)());

#endif /* FT_LIST_H */
```

You can include this `ft_list.h` header file in your program to use the linked list operations. Make sure to implement the corresponding functions and compile your program with the necessary dependencies.

Let me know if you need any further assistance!

Certainly! Here's a test program for the `ft_sorted_list_insert` function:

```c
#include <stdio.h>
#include "ft_list.h"

int ascending_order_cmp(void *data1, void *data2)
{
    int num1 = *(int *)data1;
    int num2 = *(int *)data2;
    return (num1 - num2);
}

void print_list(t_list *begin_list)
{
    t_list *current = begin_list;
    while (current != NULL)
    {
        int *data = (int *)(current->data);
        printf("%d ", *data);
        current = current->next;
    }
    printf("\n");
}

int main()
{
    t_list *list = NULL;
    int num1 = 10, num2 = 20, num3 = 30, num4 = 15, num5 = 25;

    ft_sorted_list_insert(&list, &num1, ascending_order_cmp);
    ft_sorted_list_insert(&list, &num2, ascending_order_cmp);
    ft_sorted_list_insert(&list, &num3, ascending_order_cmp);
    ft_sorted_list_insert(&list, &num4, ascending_order_cmp);
    ft_sorted_list_insert(&list, &num5, ascending_order_cmp);

    printf("Sorted list: ");
    print_list(list);

    return 0;
}
```

In this test program, we create a sorted list by inserting elements in ascending order using the `ft_sorted_list_insert` function. We define a comparison function `ascending_order_cmp` that compares two integers. The `print_list` function is used to print the elements of the list.

Make sure to include the `ft_list.h` header file and compile the program with the necessary dependencies.

Let me know if you need any further assistance!
